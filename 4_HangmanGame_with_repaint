/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hangmangame;

import javax.swing.AbstractButton;
import javax.swing.JButton;
import javax.swing.JPanel;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

import java.awt.BorderLayout;
import java.awt.Dimension;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javax.swing.JApplet;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

import java.util.Scanner;

import java.awt.*;       // Using AWT's Graphics and Color
import java.awt.event.*; // Using AWT's event classes and listener interface
import javax.swing.*;    // Using Swing's components and containers

import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;

/**
 *
 * @author S331385567
 */
public class HangmanGame extends JApplet{

    private static String[] Level1Word;
    private static String[] Level2Word;
    private static String[] Level3Word;
    private static String [] correctGuess;
    private static String [] letterGuess = new String[50]; // would ideally be for the 26 letters
    
    private static final int JFXPANEL_WIDTH_INT = 300;
    private static final int JFXPANEL_HEIGHT_INT = 250;
    private static JFXPanel fxContainer;
    
    private static Container cp;
    private static JApplet hangmanapplet;
    private static JButton submitbtn;
    private static JTextField textField;

    /**
     * @param args the command line arguments
     */
    public HangmanGame(String x) {
        this.Level1Word = Level1List();
        this.Level2Word = Level2List();
        this.Level3Word = Level3List();
        
    }
    
    public HangmanGame() {
        DrawMan canvas = new DrawMan();
        canvas.setPreferredSize(new Dimension(500, 400));
        JPanel btnPanel = new JPanel(new FlowLayout());
        
        textField = new JTextField(15);
        textField.setFont(textField.getFont().deriveFont(20f));
        textField.setText("Enter guess here"); // seems to stay as a constant value
        btnPanel.add(textField);
      
        submitbtn = new JButton("Submit");
        btnPanel.add(submitbtn);
        
        
        // THIS WORKS!!!
        submitbtn.addActionListener(new ActionListener() {
            @Override
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            String input = textField.getText(); // text remains as initial value
            System.out.println("*"+input + "*"); // text doesn't show up
            System.out.println("button works");
         }
        });
        
        // Add both panels to this JFrame's content-pane
        cp = getContentPane(); //getContentPane(); // new Container();
        cp.setLayout(new BorderLayout());
        cp.add(canvas, BorderLayout.CENTER);
        cp.add(btnPanel, BorderLayout.SOUTH);
        String userGuessInput = textField.getText();
        System.out.println(userGuessInput);
        
    }
    
    
    public static void main(String[] args) {
        
        SwingUtilities.invokeLater(new Runnable() {

            //HangmanGame man = new HangmanGame();

            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
                } catch (Exception e) {
                }

                JFrame frame = new JFrame("JavaFX 2 in Swing");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                JApplet applet = new HangmanGame("initializing");
                applet.init();

                frame.setContentPane(applet.getContentPane());

                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);

                applet.start();
            }
        });
    }

    @Override
    public void init() {
        fxContainer = new JFXPanel();
        fxContainer.setPreferredSize(new Dimension(JFXPANEL_WIDTH_INT, JFXPANEL_HEIGHT_INT));
        add(fxContainer, BorderLayout.CENTER);
        // create JavaFX scene
        Platform.runLater(new Runnable() {

            @Override
            public void run() {
                createScene();
            }
        });
    }
    

    private void createScene() { // needs to be formatted if adding more buttons
        JPanel addPanel = new JPanel();
        //Button btn = new Button();
        
        //btn.setText("Instructions");
        //btn.setLocation(12, 371);
              //addPanel.setLayout(null);
        //btn.setBounds(40,100,100,60);
    
        //addPanel.add(btn);

        Button btn2 = new Button();
        btn2.setText("Play Game");
        
        StackPane root = new StackPane();
        
        btn2.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                
                root.getChildren().remove(btn2);
                playGame();
            }
         
        });
        

        //btn..setBounds(40, 100, 100, 60);
        //btn2.setBounds(40, 100, 100, 60);

        //root.getChildren().add(btn); //add(topPanel, BorderLayout.NORTH);
        root.getChildren().add(btn2);
        fxContainer.setScene(new Scene(root));
    }

    // code so far only works for words with no repetition of letters
    public String[] Level1List() {
        //String [] Level1 = new String []{"s", "c", "h", "o", "o", "l"};
        return new String[]{"s", "c", "h", "o", "l", "a", "r"};
    }

    public String[] Level2List() {
        //String [] Level2 = new String []{"e", "c", "o", "n", "o", "m", "i", "c", "s"};
        return new String[]{"c", "h", "e", "m", "i", "s", "t", "r", "y"};
    }

    public String[] Level3List() {
        // String [] Level3 = new String []{"c", "o", "m", "p", "u", "t", "e", "r", "s", "c", "i", "e", "n", "c", "e"};
        return new String[]{"c", "o", "m", "p", "u", "t", "e", "r", "s", "c", "i", "e", "n", "c", "e"};
    }
    
    /*public String enterGuess (){ 
        Scanner scanner = new Scanner(System.in);
        
        String userGuess = textField.getText();
        while(userGuess!=null) {
            System.out.println(userGuess);

            if (userGuess.isEmpty()) {
                System.out.println("Read Enter Key.");
            }

            if (scanner.hasNextLine()) { // doesn't get called
                //userGuess = scanner.nextLine();
                userGuess = textField.getText();
            } else {
                //userGuess = null;
                userGuess = textField.getText();
            }
            //int keycode = e.getKeyCode();
            //if (HangmanGame.isWPressed()) {
              
            //}
        }
        return userGuess;
    }*/
    
    public void keyPressed(KeyEvent e){
        String key = e.getKeyText(e.getKeyCode());
        if(key.equals("Space")){
            System.out.println("works");
            String userGuess = textField.getText();
            System.out.println(textField);
        }
        
    }
    
    public void playGame(){
        
        int size = Level1Word.length;
        char guess;
        correctGuess = new String [Level1Word.length] ;
        for (int k=0; k<correctGuess.length; k++){
            correctGuess[k] = "*";
        }
        int numCorrect = 0;
        int numGuessed = 0;
        
        System.out.print("Guess the following word:");
        for (int i = 1; i <= size; i++) {
            System.out.print("_ ");
        }
        System.out.println("");
        
        Scanner input = new Scanner(System.in);
        
        JFrame hangmanframe = new JFrame ("Hangman Screen");
        hangmanframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        hangmanapplet = new HangmanGame();
        hangmanapplet.init();
        hangmanframe.setContentPane(hangmanapplet.getContentPane());
        DrawMan h = new DrawMan();
        hangmanframe.add(h);
        hangmanframe.setSize(500, 500);
        hangmanframe.setVisible(true);
        
        HangmanGame man = new HangmanGame();
        //System.out.println(enterGuess ()); 
        
        h.wordAns = Level1Word;
        h.wordGuess = correctGuess;
        
        
        /*submitbtn.addActionListener(new ActionListener(){ // NOT WORKING
            //@Override
            public void actionPerformed(ActionEvent e){
                System.out.println("Do Something Clicked");
            }
        });*/
        
        /*submitbtn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                
                System.out.println("Do Something Clicked");
            }
        });*/
        
        
        //submitbtn.addActionListener(this);
        
        int check;
        
        while((h.livesLeft>0) && (numCorrect<Level1Word.length)){
            
            System.out.println("Guess a letter");
            
            // this line needs to be changed so guess equals value entered in text field
            guess = input.next().charAt(0);
            if (Character.isLetter(guess) == false){
                System.out.println("not a letter");
                continue;
            }
            
            check = checkifcorrect(guess);
            if (check==1){
                System.out.println("correct");
                correctGuess[numCorrect] = Character.toString(guess);
                letterGuess[1] = Character.toString(guess);
                numCorrect+= 1;
                numGuessed+= 1;
                h.wordGuess = correctGuess;
                h.repaint();
            }else if (check==0){ 
                letterGuess[numGuessed] = Character.toString(guess); // won't do if check == 2
                numGuessed+= 1;
                h.livesLost += 1 ;
                h.livesLeft = 6 - h.livesLost ;
                h.repaint(); 
                //h.requestFocus(); // works without it
            }
            
        }
        
        if (numCorrect==Level1Word.length){
            System.out.println("YOU WIN");
            h.win = true;
            h.repaint(); 
        }
        
        
        
    }
    
    public static int checkifcorrect(Character userguess){
        String userguessString = Character.toString(userguess);
        int isitcorrect = 0;
        
        for (int y=0; y<Level1Word.length; y++){
            if (userguessString.equalsIgnoreCase(Level1Word[y])){
                System.out.println("correct,");
                isitcorrect = 1;
              }
        }
        
        for (int z=0; z<letterGuess.length; z++){
            if (userguessString.equalsIgnoreCase(letterGuess[z]) ){ // if not already guessed and correct
                 System.out.println("but you already guessed this");
                 isitcorrect = 2;
                 break;
                 // shouldn't draw body part if here
             }
        }
        
        return isitcorrect;
        
    }

}
